# Package configuration 

  # Load balancer package for EV charging
  # Requires the following helpers to be created:
  # - input_number.ev_load_balancing_power_limit
  # - input_number.ev_load_balancer_extended_power_limit
  # - input_select.ev_charge_mode [Off, Minimal 1.4kW, Minimal 4kW, Eco, Fast]
  # - input_number.ev_soc_threshold
  # - input_datetime.ev_charge_time_target

# Charger settings
charger:
  # Sensor references
  home_power: sensor.netto_verbruik_huis_lp
  connection_state: sensor.alfen_eve_connection_state
  mode3_state: sensor.alfen_mode3_state_socket_1
  active_power: sensor.alfen_eve_active_power_total_socket_1
  current: number.alfen_eve_power_connector_max_current_socket_1
  phase_select: select.alfen_eve_installation_max_allowed_phases
  max_phases: 3
  max_current: 16
  min_current: 6
  nominal_voltage: 230

  # Cars settings
cars:
  bmw_ix3:
    # Required parameters
    max_current: 16
    min_current: 6
    battery_capacity_wh: 80000
    soc_sensor: sensor.ix3_m_sport_remaining_battery_percent
    time_sensor: input_datetime.ev_charge_time_target

# Input entities
settings:
  # Power settings
  power_limit: input_number.ev_load_balancing_power_limit
  power_limit_extended: input_number.ev_load_balancer_extended_power_limit
  charge_mode: input_select.ev_charge_mode
  soc_threshold: input_number.ev_soc_threshold
  car: bmw_ix3  # Reference just the car key, not the full path

script:
  get_charging_parameters:
    variables:
      selected_car: "{{ config.ev_load_balancer.cars[config.ev_load_balancer.settings.car] }}"
      response:
        config:
          charger: "{{ config.ev_load_balancer.charger }}"
          settings: "{{ config.ev_load_balancer.settings }}"
        settings:
          max_current: "{{ [selected_car.max_current if selected_car else config.ev_load_balancer.charger.max_current, config.ev_load_balancer.charger.max_current] | min }}"
          min_current: "{{ [selected_car.min_current if selected_car else config.ev_load_balancer.charger.min_current, config.ev_load_balancer.charger.min_current] | max }}"
          nominal_voltage: "{{ config.ev_load_balancer.charger.nominal_voltage }}"
          power_limit: "{{ states(config.ev_load_balancer.settings.power_limit) }}"
          power_limit_extended: "{{ states(config.ev_load_balancer.settings.power_limit_extended) }}"
          charge_mode: "{{ states(config.ev_load_balancer.settings.charge_mode) }}"
        car:
          config: "{{ selected_car if selected_car else '' }}"
          battery_percentage: >
            {% if selected_car and has_value(selected_car.soc_sensor) %}
              {{ states(selected_car.soc_sensor) | int }}
            {% else %}
              {{ 100 }}
            {% endif %}
          soc_threshold: >
            {% if states(config.ev_load_balancer.settings.soc_threshold) %}
              {{ states(config.ev_load_balancer.settings.soc_threshold) | int }}
            {% else %}
              {{ 0 }}
            {% endif %}
          time_until_target_time: >
            {% if selected_car and selected_car.time_sensor %}
              {% set now = now() %}
              {% set target = strptime(states(selected_car.time_sensor), "%H:%M") %}
              {% set target_datetime = now.replace(hour=target.hour, minute=target.minute, second=0, microsecond=0) %}
              {% if target_datetime < now %}
                {% set target_datetime = target_datetime + timedelta(days=1) %}
              {% endif %}
              {{ ((target_datetime - now).total_seconds() / 3600) | round(2) }}
            {% else %}
              {{ 24.0 }}
            {% endif %}
    sequence:
    - stop: ""
      response_variable: "{{ response }}"

  set_charger_params:
    alias: Set EV charging parameter
    variables:
      charger: "{{ config.ev_load_balancer.charger }}"
    sequence:
      - variables:
          finalcurrent: |-
            {% if current < 6 %}
              0
            {% else %}
              {{ current }}
            {% endif %}
      - parallel:
          - alias: Set phases
            if:
              - condition: template
                value_template: "{{ has_value(charger.phase_select) }}"
              - alias: If phase change
                condition: template
                value_template: "{{ phase != states(charger.phase_select) }}"
            then:
              - action: system_log.write
                data:
                  level: info
                  message: "[Pkg] Changing phase from {{ states(charger.phase_select) }} to {{ phase }}"
              - action: logbook.log
                data:
                  message: "[Pkg] Changing phase from {{ states(charger.phase_select) }} to {{ phase }}"
                  entity_id: "{{ charger.phase_select }}"
                  name: Alfen Phases
              - action: select.select_option
                data:
                  option: "{{ phase }}"
                target:
                  entity_id: "{{ charger.phase_select }}"
                enabled: false
              # Allow the relay switching to complete and stabilize
              - delay:
                  seconds: 10
                enabled: true
          - alias: Set current
            if:
              - condition: template
                value_template: "{{ has_value(charger.current) }}"
              - condition: template
                value_template: "{{ finalcurrent | int != states(charger.current) | int }}"
                enabled: true
            then:
              - action: system_log.write
                data:
                  level: info
                  message: "[Pkg] Changing current from {{ states(charger.current) }} to {{ finalcurrent }}"
              - action: logbook.log
                data:
                  message: "[Pkg] Changing current from {{ states(charger.current) }} to {{ finalcurrent }}"
                  entity_id: "{{ charger.current }}"
                  name: Alfen Current
              - action: number.set_value
                data:
                  value: "{{ finalcurrent }}"
                target:
                  entity_id: "{{ charger.current }}"
                enabled: false
              # Allow the current change to settle
              - delay:
                  seconds: 5
                enabled: true
    description: Set the Alfen Eve Pro current and phase
    icon: mdi:ev-station
    fields:
      phase:
        selector:
          select:
            options:
              - 1 Phase
              - 3 Phases
            multiple: false
        name: phase
        required: false
        description: EV charging phase [1 Phase, 3 Phases]
        default: 1 Phase
      current:
        selector:
          number:
            min: 0
            max: 16
            step: 1
        name: current
        required: true
        default: 6
        description: EV charging current
    mode: single

automation:
  - alias: Load Balance EV Charging
    id: load_balance_ev_charging
    description: "Dynamic load balancing for EV charging with optional car-aware power management"
    variables:
      # Initialize response variable
      params: null
      
      # Get configuration
      charger: "{{ config.ev_load_balancer.charger }}"
      settings: "{{ config.ev_load_balancer.settings }}"
      
      # Define constants from charger
      nominal_voltage: "{{ charger.nominal_voltage }}"
      
      # Get sensor states once
      sensor_states:
        home_power: "{{ states(charger.home_power) | int }}"
        charger_current: "{{ states(charger.current) | int }}"
        charger_power: "{{ states(charger.active_power) | float }}"
        charger_phases: "{{ states(charger.phase_select) }}"
        power_limit: "{{ states(settings.power_limit) | int }}"
        power_limit_extended: "{{ states(settings.power_limit_extended) | int }}"
        power_limit_normal: "{{ states(settings.power_limit) | int }}"

    triggers:
      - trigger: time_pattern
        seconds: /10
      - trigger: template
        value_template: "{{ states(settings.charge_mode) }}"
      - trigger: template
        value_template: "{{ states(settings.power_limit) }}"
    conditions:
      - condition: template
        value_template: "{{ states(charger.connection_state) == 'Connected' }}"
      - condition: template
        value_template: "{{ has_value(charger.phase_select) and has_value(charger.current) }}"

    actions:
      - action: script.get_charging_parameters
        response_variable: params
      
      - variables:
          # Calculate efficiency using sensor states with proper variable references
          charger_efficiency: >
            {% set phase_count = 3 if sensor_states.charger_phases == "3 Phases" else 1 %}
            {% if sensor_states.charger_current > 0 and sensor_states.charger_power > 1000.0 %}
              {{ sensor_states.charger_power / (sensor_states.charger_current * nominal_voltage * phase_count) }}
            {% else %}
              {{ 1.0 }}
            {% endif %}

          # Power calculations with proper variable references
          available_power: >
            {% set power_left = (sensor_states.power_limit_normal - sensor_states.home_power) / charger_efficiency %}
            {{ power_left if power_left > 0 else 0 }}
          phase_selection: "{{ 3 if available_power >= (nominal_voltage * params.settings.min_current * 3) else 1 }}"
          current_limit: >
            {% set current = (available_power / (nominal_voltage * phase_selection)) | int %}
            {% if current < params.settings.min_current %}
              0
            {% elif current > params.settings.max_current %}
              {{ params.settings.max_current }}
            {% else %}
              {{ current }}
            {% endif %}

          # Battery state estimation
          estimated_battery_percentage: >
            {% if params.car.config %}
              {% set charging_power = (current_limit * nominal_voltage * phase_selection) | float %}
              {% set added_energy = (charging_power * params.car.time_until_target_time | float) %}
              {{ (((params.car.config.battery_capacity_wh * params.car.battery_percentage / 100) + added_energy) / params.car.config.battery_capacity_wh) * 100 }}
            {% else %}
              {{ 100 }}
            {% endif %}

          # Final power adjustments
          power_limit: |
            {% if params.car.config and estimated_battery_percentage | int < params.car.soc_threshold %}
              {{ power_limit_extended }}
            {% else %}
              {{ power_limit_normal }}
            {% endif %}
          adjusted_available_power_final: |
            {% set power_left = (sensor_states.power_limit - sensor_states.home_power) / charger_efficiency %}
            {{ power_left if power_left > 0 else 0 }}
          adjusted_phase_selection: >-
            {{ 3 if adjusted_available_power_final >= (nominal_voltage * params.settings.min_current * 3) else 1 }}
          adjusted_current_limit: >
            {% set current = (adjusted_available_power_final / (nominal_voltage * adjusted_phase_selection)) | int %}
            {% if current | int < params.settings.min_current %}
              0
            {% elif current > params.settings.max_current %}
              {{ params.settings.max_current }}
            {% else %}
              {{ current }}
            {% endif %}

      # Add logging before charging mode selection
      - action: system_log.write
        metadata: {}
        data:
          message: >
            Charging calculations - Efficiency: {{ charger_efficiency }},
            Available power: {{ available_power }}W,
            Current limit: {{ current_limit }}A,
            Phase selection: {{ phase_selection }}
          level: debug

      # Charging mode selection with logging
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states(params.config.settings.charge_mode) == 'Off' }}"
            sequence:
              - action: script.set_pv_charging_parameter
                metadata: {}
                data:
                  current: 0
                  phase: 3 Phases
                target:
                  entity_id: script.set_pv_charging_parameter
          - conditions:
              - condition: template
                value_template: "{{ states(params.config.settings.charge_mode) == 'Minimal 1.4kW' }}"
            sequence:
              - action: script.set_pv_charging_parameter
                metadata: {}
                data:
                  current: 6
                  phase: 1 Phase
                target:
                  entity_id: script.set_pv_charging_parameter
          - conditions:
              - condition: template
                value_template: "{{ states(params.config.settings.charge_mode) == 'Minimal 4kW' }}"
            sequence:
              - action: script.set_pv_charging_parameter
                metadata: {}
                data:
                  current: 6
                  phase: 3 Phases
                target:
                  entity_id: script.set_pv_charging_parameter
          - conditions:
              - condition: template
                value_template: "{{ states(params.config.settings.charge_mode) == 'Fast' }}"
            sequence:
              - action: script.set_pv_charging_parameter
                metadata: {}
                data:
                  current: 16
                  phase: 3 Phases
                target:
                  entity_id: script.set_pv_charging_parameter
          - conditions:
              - condition: template
                value_template: "{{ states(params.config.settings.charge_mode) == 'Eco' }}"
            sequence:
              - action: script.set_pv_charging_parameter
                metadata: {}
                data:
                  current: "{{ adjusted_current_limit | int }}"
                  phase: "{{ '1 Phase' if adjusted_phase_selection == 1 else '3 Phases' }}"
                target:
                  entity_id: script.set_pv_charging_parameter
    mode: single

  - alias: Reset chargepoint
    description: Reset charger when car disconnects
    variables:
      charger: "{{ config.ev_load_balancer.charger }}"
    triggers:
      - trigger: template
        value_template: "{{ states(config.ev_load_balancer.charger.connection_state) == 'Disconnected' }}"
        for:
          minutes: 1
    action:
      - action: script.set_pv_charging_parameter
        metadata: {}
        data:
          current: "{{ config.ev_load_balancer.charger.max_current }}"
          phase: 3 Phases
        target:
          entity_id: script.set_pv_charging_parameter
    mode: single
