# Package configuration for EV load balancing

# Load balancer package for EV charging
# Requires the following helpers to be created:
# - input_number.ev_load_balancing_power_limit
# - input_number.ev_load_balancer_extended_power_limit
# - input_select.ev_charge_mode [Off, Minimal 1.4kW, Minimal 4kW, Eco, Fast]
# - input_number.ev_soc_threshold
# - input_datetime.ev_charge_time_target

# Charger settings
template:
  - sensor:
      - name: "ev_load_balancer_charger"
        state: "{{ states('sensor.alfen_eve_connection_state') }}"
        unique_id: ev_load_balancer_charger
        icon: mdi-ev-station
        attributes:
          # Sensor references
          home_power: "{{ states('sensor.netto_verbruik_huis_lp') }}"
          mode3_state: "{{ states('sensor.alfen_mode3_state_socket_1') }}"
          active_power: "{{ states('sensor.alfen_eve_active_power_total_socket_1') }}"
          current: "{{ states('number.alfen_eve_power_connector_max_current_socket_1') }}"
          phase_select: "{{ states('select.alfen_eve_installation_max_allowed_phases') }}"
          max_phases: "{{ 3 | int }}"
          max_current: "{{ 16 | int }}"
          min_current: "{{ 6 | int }}"
          nominal_voltage: "{{ 230 | int }}"

      # Cars settings
      - name: "ev_load_balancer_car"
        state: "BMW ix3"
        unique_id: ev_load_balancer_car
        icon: mdi:car-electric
        # Required parameters
        attributes:
          max_current: "{{ 16 | int }}"
          min_current: "{{ 6 | int }}"
          battery_capacity_wh: "{{ 80000 | int }}"
          battery_percentage: "{{states('sensor.ix3_m_sport_remaining_battery_percent') | int(100)}}"
          time_sensor: "{{ states('input_datetime.ev_charge_time_target') }}"
          soc_threshold: "{{ states('input_number.ev_soc_threshold') | int(0)}}"

      # Input entities
      - name: "ev_load_balancer"
        state: "{{ states('input_select.ev_charge_mode') }}"
        unique_id: "ev_load_balancer_settings"
        # Power settings
        attributes:
          power_limit: "{{ states('input_number.ev_load_balancing_power_limit') }}"
          power_limit_extended: "{{ states('input_number.ev_load_balancer_extended_power_limit') }}"
          car_aware: "{{ true }}"

script:
  ev_load_balancer_get_charging_parameters:
    alias: Get EV load balancer charging parameters
    variables:
      configured_car: >
        {% set car_aware = state_attr('sensor.ev_load_balancer', 'car_aware') %}
        {{ states('sensor.ev_load_balancer_car') if car_aware else '' }}
      response:
        config:
          charger: "{{ states('sensor.ev_load_balancer_charger') }}"
          settings: "{{ states('sensor.ev_load_balancer') }}"
          max_current: >
            {% set charger_max_current = state_attr('sensor.ev_load_balancer_charger', 'max_current') | int(16) %}
            {% set car_max_current = state_attr('sensor.ev_load_balancer_car', 'max_current') | int(16) %}
            {{ [car_max_current if configured_car else charger_max_current, charger_max_current] | min }}
          min_current: >
            {% set charger_min_current = state_attr('sensor.ev_load_balancer_charger', 'min_current') %}
            {% set car_min_current = state_attr('sensor.ev_load_balancer_car', 'min_current') %}
            {{ [car_min_current if configured_car else charger_min_current, charger_max_current] | max }}
        car: >
          {{ states('sensor.ev_load_balancer_car') if configured_car else '' }}
          time_until_target_time: >
            {% if configured_car %}
              {% set now = now() %}
              {% set target = strptime(state_attr('sensor.ev_load_balancer_car', 'time_sensor'), "%H:%M") %}
              {% set target_datetime = now.replace(hour=target.hour, minute=target.minute, second=0, microsecond=0) %}
              {% if target_datetime < now %}
                {% set target_datetime = target_datetime + timedelta(days=1) %}
              {% endif %}
              {{ ((target_datetime - now).total_seconds() / 3600) | round(2) }}
            {% else %}
              {{ 24.0 }}
            {% endif %}
    sequence:
      - stop: ""
        response_variable: "{{ response }}"

  ev_load_balancer_set_charger_params:
    alias: Set EV load balancer charger parameter
    variables:
      charger: "{{ states('sensor.ev_load_balancer_charger') }}"
      configured_car: >
        {% set car_aware = state_attr('sensor.ev_load_balancer', 'car_aware') %}
        {{ states('sensor.ev_load_balancer_car') if car_aware else '' }}
      min_current: >
        {% set charger_min_current = state_attr('sensor.ev_load_balancer_charger', 'min_current') %}
        {% set car_min_current = state_attr('sensor.ev_load_balancer_car', 'min_current') %}
        {{ [car_min_current if configured_car else charger_min_current, charger_max_current] | max }}
    sequence:
      - variables:
          finalcurrent: |-
            {% if current < min_current %}
              0
            {% else %}
              {{ current }}
            {% endif %}
      - parallel:
          - alias: Set phases
            if:
              - condition: template
                value_template: "{{ has_value('sensor.ev_load_balancer_charger.phase_select') }}"
              - alias: If phase change
                condition: template
                value_template: "{{ phase != state_attr('sensor.ev_load_balancer_charger', 'phase_select') }}"
            then:
              - action: system_log.write
                data:
                  level: info
                  message: "[Pkg] Changing phase from {{ state_attr('sensor.ev_load_balancer_charger', 'phase_select') }} to {{ phase }}"
              - action: select.select_option
                data:
                  option: "{{ phase }}"
                target:
                  entity_id: "{{ select.alfen_eve_installation_max_allowed_phases }}"
                enabled: false
              # Allow the relay switching to complete and stabilize
              - delay:
                  seconds: 10
                enabled: true
          - alias: Set current
            if:
              - condition: template
                value_template: "{{ has_value('sensor.ev_load_balancer_charger.current') }}"
              - condition: template
                value_template: "{{ finalcurrent | int != state_attr('sensor.ev_load_balancer_charger','current') | int }}"
                enabled: true
            then:
              - action: system_log.write
                data:
                  level: info
                  message: "[Pkg] Changing current from {{ states(charger.current) }} to {{ finalcurrent }}"
              - action: number.set_value
                data:
                  value: "{{ finalcurrent }}"
                target:
                  entity_id: "{{ number.alfen_eve_power_connector_max_current_socket_1 }}"
                enabled: false
              # Allow the current change to settle
              - delay:
                  seconds: 5
                enabled: true
    description: Set the Alfen Eve Pro current and phase
    icon: mdi:ev-station
    fields:
      phase:
        selector:
          select:
            options:
              - 1 Phase
              - 3 Phases
            multiple: false
        name: phase
        required: false
        description: EV charging phase [1 Phase, 3 Phases]
        default: 1 Phase
      current:
        selector:
          number:
            min: 6
            max: 16
            step: 1
        name: current
        required: true
        default: 6
        description: EV charging current
    mode: single

automation:
  - alias: Load Balance EV Charging2
    id: load_balance_ev_charging
    description: "Dynamic load balancing for EV charging with optional car-aware power management"

    triggers:
      - trigger: time_pattern
        #        seconds: /10
        minutes: /1
    conditions:
      - condition: template
        value_template: "{{ states('sensor.ev_load_balancer_charger') == 'Connected' }}"
      - condition: template
        value_template: "{{ has_value(state_attr('sensor.ev_load_balancer_charger', 'phase_select')) and has_value(state_attr('sensor.ev_load_balancer_charger', 'current')) }}"

    actions:
      - action: script.ev_load_balancer_get_charging_parameters
        response_variable: params

      - variables:
          # Get sensor states with proper attribute references
          home_power: "{{ params.charger.home_power | int(0) }}"
          charger_current: "{{ params.charger.current | int(0) }}"
          charger_power: "{{ params.charger.active_power | float(0) }}"
          charger_phases: >
            {% set phase = params.charger.phase_select %}
            {{ phase if phase in ['1 Phase', '3 Phases'] else '1 Phase' }}
          power_limit_extended: "{{ params.settings.power_limit_extended | int }}"
          power_limit_normal: "{{ params.settings.power_limit | int }}"
          nominal_voltage: "{{ params.charger.nominal_voltage }}"

          # Calculate efficiency using sensor states with proper variable references
          charger_efficiency: >
            {% set phase_count = 3 if charger_phases == "3 Phases" else 1 %}
            {% if charger_current > 0 and charger_power > 1000.0 %}
              {{ charger_power / (charger_current * nominal_voltage * phase_count) }}
            {% else %}
              {{ 1.0 }}
            {% endif %}

          # Power calculations
          available_power: >
            {% set power_left = (power_limit_normal - home_power) / charger_efficiency %}
            {{ power_left if power_left > 0 else 0 }}
          phase_selection: "{{ 3 if available_power >= (nominal_voltage * params.settings.min_current * 3) else 1 }}"
          current_limit: >
            {% set current = (available_power / (nominal_voltage * phase_selection)) | int %}
            {% if current < params.settings.min_current %}
              0
            {% elif current > params.settings.max_current %}
              {{ params.settings.max_current }}
            {% else %}
              {{ current }}
            {% endif %}

          # Battery state estimation only if car aware is enabled
          estimated_battery_percentage: >
            {% if params.car and params.car.config %}
              {% set charging_power = (current_limit * nominal_voltage * phase_selection) | float %}
              {% set added_energy = (charging_power * params.car.time_until_target_time | float) %}
              {{ (((params.car.config.battery_capacity_wh * params.car.battery_percentage / 100) + added_energy) / params.car.config.battery_capacity_wh) * 100 }}
            {% else %}
              {{ 100 }}
            {% endif %}

          # Final power adjustments considering car awareness
          power_limit: |
            {% if params.car and params.car.config and estimated_battery_percentage | int < params.car.soc_threshold %}
              {{ power_limit_extended }}
            {% else %}
              {{ power_limit_normal }}
            {% endif %}
          adjusted_available_power_final: |
            {% set power_left = (power_limit - home_power) / charger_efficiency %}
            {{ power_left if power_left > 0 else 0 }}
          adjusted_phase_selection: >-
            {{ 3 if adjusted_available_power_final >= (nominal_voltage * params.settings.min_current * 3) else 1 }}
          adjusted_current_limit: >
            {% set current = (adjusted_available_power_final / (nominal_voltage * adjusted_phase_selection)) | int %}
            {% if current | int < params.settings.min_current %}
              0
            {% elif current > params.settings.max_current %}
              {{ params.settings.max_current }}
            {% else %}
              {{ current }}
            {% endif %}

      # Add logging before charging mode selection
      - action: system_log.write
        metadata: {}
        data:
          message: >
            Charging calculations - Efficiency: {{ charger_efficiency }},
            Available power: {{ available_power }}W,
            Current limit: {{ current_limit }}A,
            Phase selection: {{ phase_selection }}
          level: debug

      # Charging mode selection with logging
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ params.settings.charge_mode == 'Off' }}"
            sequence:
              - action: script.ev_load_balancer_set_charger_params
                metadata: {}
                data:
                  current: 0
                  phase: 3 Phases
                target:
                  entity_id: script.ev_load_balancer_set_charger_params
          - conditions:
              - condition: template
                value_template: "{{ params.settings.charge_mode == 'Minimal 1.4kW' }}"
            sequence:
              - action: script.ev_load_balancer_set_charger_params
                metadata: {}
                data:
                  current: 6
                  phase: 1 Phase
                target:
                  entity_id: script.ev_load_balancer_set_charger_params
          - conditions:
              - condition: template
                value_template: "{{ params.settings.charge_mode == 'Minimal 4kW' }}"
            sequence:
              - action: script.ev_load_balancer_set_charger_params
                metadata: {}
                data:
                  current: 6
                  phase: 3 Phases
                target:
                  entity_id: script.ev_load_balancer_set_charger_params
          - conditions:
              - condition: template
                value_template: "{{ params.settings.charge_mode == 'Fast' }}"
            sequence:
              - action: script.ev_load_balancer_set_charger_params
                metadata: {}
                data:
                  current: 16
                  phase: 3 Phases
                target:
                  entity_id: script.ev_load_balancer_set_charger_params
          - conditions:
              - condition: template
                value_template: "{{ params.settings.charge_mode == 'Eco' }}"
            sequence:
              - action: script.ev_load_balancer_set_charger_params
                metadata: {}
                data:
                  current: "{{ adjusted_current_limit | int }}"
                  phase: "{{ '1 Phase' if adjusted_phase_selection == 1 else '3 Phases' }}"
                target:
                  entity_id: script.ev_load_balancer_set_charger_params
    mode: single
#  - alias: Reset chargepoint2
#    description: Reset charger when car disconnects
#    variables:
#      charger: "{{ config.ev_load_balancer.charger }}"
#    triggers:
#      - trigger: template
#        value_template: "{{ states(config.ev_load_balancer.charger.connection_state) == 'Disconnected' }}"
#        for:
#          minutes: 1
#    action:
#      - action: script.set_charger_params
#        metadata: {}
#        data:
#          current: "{{ config.ev_load_balancer.charger.max_current }}"
#          phase: 3 Phases
#        target:
#          entity_id: script.set_charger_params
#    mode: single
