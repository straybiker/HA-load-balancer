alias: Load Balance EV Charging
description: "Dynamic load balancing for EV charging with optional car-aware power management"
trigger_variables:
  params: !include cars/ev_loadbalancer_config.yaml
triggers:
  - trigger: time_pattern
    seconds: /10
  - trigger: state
    entity_id:
      - "{{ params.settings.charge_mode }}"
      - "{{ params.settings.power_limit }}"
conditions:
  - condition: state 
    entity_id: "{{ params.charger.connection_state }}"
    state: Connected
  - condition: template
    value_template: "{{ has_value(params.charger.phase_select) }}"
  - condition: template
    value_template: "{{ has_value(params.charger.current) }}"
actions:
  - service: script.get_charging_parameters
    response_variable: params
  - variables:
      # Sensor definitions
      sensor_home_power: "{{ params.charger.home_power }}"
      sensor_charger_current: "{{ params.charger.current }}"
      sensor_charger_power: "{{ params.charger.active_power }}"
      sensor_charger_phases: "{{ params.charger.phase_select }}"
      
      # Power settings
      home_power: "{{ states(sensor_home_power) | int }}"
      power_limit_normal: "{{ states(params.config.settings.power_limit) | int }}"
      power_limit_extended: "{{ states(params.config.settings.power_limit_extended) | int }}"

      # Car config
      max_current: "{{ params.car_config.max_current if params.car_config else params.config.charger.max_current }}"
      min_current: "{{ params.car_config.min_current if params.car_config else params.config.charger.min_current }}"

      # Charger efficiency calculation
      charger_efficiency: >
        {% set current_phase = 3 if states(sensor_charger_phases) == "3 Phases" else 1 %}   
        {% if (states(sensor_charger_current) | int > 0) and (states(sensor_charger_power) | float > 1000.0) %}   
          {{ states(sensor_charger_power) | float / (states(sensor_charger_current) | int * 230 * current_phase) | float }} 
        {% else %} 
          {{ 1.0 }}
        {% endif %}

      # Power calculations
      available_power: >
        {% set power_left = (power_limit_normal - home_power) / charger_efficiency %}
        {{ power_left if power_left > 0 else 0 }}
      phase_selection: "{{ 3 if available_power >= (230 * min_current * 3) else 1 }}"
      current_limit: >
        {% set current = (available_power / (230 * phase_selection)) | int %}
        {% if current | int < min_current %}
          0
        {% elif current > max_current %}
          {{ max_current }}
        {% else %}
          {{ current }}
        {% endif %}

      # Battery state estimation
      estimated_battery_percentage: >
        {% if params.car_config %}
          {% set charging_power = (current_limit * 230 * phase_selection) | float %}
          {% set added_energy = (charging_power * params.car.time_until_target_time | float) %}
          {{ (((params.car_config.battery_capacity_wh * params.car.battery_percentage / 100) + added_energy) / params.car_config.battery_capacity_wh) * 100 }}
        {% else %}
          {{ 100 }}
        {% endif %}

      # Final power adjustments
      power_limit: |
        {% if params.car_config and estimated_battery_percentage | int < params.car.soc_threshold %}
          {{ power_limit_extended }}
        {% else %}
          {{ power_limit_normal }}
        {% endif %}
      adjusted_available_power_final: |
        {% set power_left = (power_limit - home_power) / charger_efficiency %}
        {{ power_left if power_left > 0 else 0 }}
      adjusted_phase_selection: >-
        {{ 3 if adjusted_available_power_final >= (230 * min_current * 3) else 1 }}
      adjusted_current_limit: >
        {% set current = (adjusted_available_power_final / (230 * adjusted_phase_selection)) | int %}
        {% if current | int < min_current %}
          0
        {% elif current > max_current %}
          {{ max_current }}
        {% else %}
          {{ current }}
        {% endif %}

  # Charging mode selection
  - choose:
      - conditions:
          - condition: state
            entity_id: "{{ params.settings.charge_mode }}"
            state: "Off"
        sequence:
          - action: script.set_pv_charging_parameter
            metadata: {}
            data:
              current: 0
              phase: 3 Phases
            target:
              entity_id: script.set_pv_charging_parameter
      - conditions:
          - condition: state
            entity_id: "{{ params.settings.charge_mode }}"
            state: "Minimal 1.4kW"
        sequence:
          - action: script.set_pv_charging_parameter
            metadata: {}
            data:
              current: 6
              phase: 1 Phase
            target:
              entity_id: script.set_pv_charging_parameter
      - conditions:
          - condition: state
            entity_id: "{{ params.settings.charge_mode }}"
            state: "Minimal 4kW"
        sequence:
          - action: script.set_pv_charging_parameter
            metadata: {}
            data:
              current: 6
              phase: 3 Phases
            target:
              entity_id: script.set_pv_charging_parameter
      - conditions:
          - condition: state
            entity_id: "{{ params.settings.charge_mode }}"
            state: "Fast"
        sequence:
          - action: script.set_pv_charging_parameter
            metadata: {}
            data:
              current: 16
              phase: 3 Phases
            target:
              entity_id: script.set_pv_charging_parameter
      - conditions:
          - condition: state
            entity_id: "{{ params.settings.charge_mode }}"
            state: "Eco"
        sequence:
          - action: script.set_pv_charging_parameter
            metadata: {}
            data:
              current: "{{ adjusted_current_limit | int }}"
              phase: "{{ '1 Phase' if adjusted_phase_selection == 1 else '3 Phases' }}"
            target:
              entity_id: script.set_pv_charging_parameter
mode: single
icon: mdi:scale-balance